/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UNIQUE_NOTE_TEMPLATE = "Unique Note Inbox Template";
var UNIQUE_NOTE_PATH = "00-09 \u{1F4BE} System/02 Obsidian/02.00 Notes";
var INBOX_PATH = "70-79 \u2611\uFE0F Productivity/70 System/70.01 \u{1F4E5} Inbox";
var TASKS_PATH = "70-79 \u2611\uFE0F Productivity/70 System/70.02 Tasks/Floating Tasks.md";
function open_inbox_note(app) {
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    const mc = app.metadataCache.getFileCache(file);
    if (mc == null) {
      continue;
    }
    let tags = (0, import_obsidian.getAllTags)(mc);
    if (tags == null) {
      continue;
    }
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  let folder = app.vault.getAbstractFileByPath(INBOX_PATH);
  if (folder instanceof import_obsidian.TFolder) {
    for (const f of folder.children) {
      if (f instanceof import_obsidian.TFile) {
        inboxFiles.push(f);
      }
    }
  }
  inboxFiles.sort((a, b) => b.stat.ctime - a.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = 0;
  let activeFile = this.app.workspace.getActiveFile();
  if (activeFile !== null) {
    index = inboxFiles.findIndex((obj) => obj == activeFile);
    if (index < 0) {
      index = -1;
    }
    index = (index + 1) % inboxFiles.length;
  }
  app.workspace.getLeaf().openFile(inboxFiles[index]);
}
async function unique_note(app) {
  const file = app.vault.getMarkdownFiles().find(
    (f) => f.basename == UNIQUE_NOTE_TEMPLATE
  );
  if (file == null) {
    console.log("Can't find: ", UNIQUE_NOTE_TEMPLATE);
    return null;
  }
  let currentDate = new Date().toISOString().slice(0, 10);
  let contents = await app.vault.cachedRead(file);
  contents = contents.replace(/{{date}}/g, currentDate);
  let stamp = Math.random().toString(36).substring(9).toUpperCase();
  let name = `${UNIQUE_NOTE_PATH}/${currentDate} ${stamp}.md`;
  let newFile = await app.vault.create(name, contents);
  await app.workspace.getLeaf().openFile(newFile);
  const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (view == null) {
    return;
  }
  view.editor.focus();
}
async function copy_markdown(app) {
  let file = app.workspace.getActiveFile();
  if (file == null) {
    return;
  }
  let contents = await app.vault.cachedRead(file);
  contents = contents.replace(/^---[\s\S]*?---/, "");
  contents = contents.replace(/^[\s\S]*%%\s*?\-\-\-\s*?%%/, "");
  contents = contents.replace(/\[\[(.*?)\|(.*?)\]\]/g, "$2");
  contents = contents.replace(/\[\[(.*?)\]\]/g, "$1");
  contents = contents.replace(/%%[\s\S]*?%%/g, "");
  contents = contents.replace(/^\s*/, "");
  contents = contents.replace(/\s*$/, "");
  await navigator.clipboard.writeText(contents);
  new import_obsidian.Notice(contents);
}
function toggle_inbox(app) {
  let file = app.workspace.getActiveFile();
  if (file == null) {
    return;
  }
  app.fileManager.processFrontMatter(file, (fm) => {
    let tags = (0, import_obsidian.parseFrontMatterTags)(fm);
    if (tags == null) {
      tags = ["#inbox"];
    } else if (!tags.includes("#inbox")) {
      tags.push("#inbox");
    } else {
      tags = tags.filter((x) => x !== "#inbox");
    }
    fm.tags = tags;
    return fm;
  });
}
function append_task(app) {
  var _a;
  const editor = (_a = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
  if (editor == null) {
    return;
  }
  const cursor = editor.getCursor();
  const lineContent = editor.getLine(cursor.line);
  editor.replaceRange(
    "",
    { line: cursor.line, ch: 0 },
    { line: cursor.line + 1, ch: 0 }
  );
  const file = app.vault.getAbstractFileByPath(TASKS_PATH);
  if (file instanceof import_obsidian.TFile) {
    this.app.vault.append(file, "\n" + lineContent);
  }
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    const inbox_next_cb = () => {
      open_inbox_note(this.app);
    };
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next inbox",
      callback: inbox_next_cb
    });
    this.addRibbonIcon("mails", "Next Inbox", inbox_next_cb);
    const delete_inbox_cb = () => {
      let file = this.app.workspace.getActiveFile();
      open_inbox_note(this.app);
      if (file !== null) {
        this.app.vault.trash(file, false);
      }
    };
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete",
      callback: delete_inbox_cb
    });
    this.addRibbonIcon("trash", "Delete, Open Inbox", delete_inbox_cb);
    const new_note_cb = () => {
      unique_note(this.app);
    };
    this.addCommand({
      id: "ethan:unique-note",
      name: "New note",
      callback: new_note_cb
    });
    this.addRibbonIcon("file-plus-2", "Create Unique note", new_note_cb);
    const copy_markdown_cb = () => {
      copy_markdown(this.app);
    };
    this.addCommand({
      id: "ethan:copy-markdown",
      name: "Copy markdown",
      callback: copy_markdown_cb
    });
    const toggle_inbox_cb = () => {
      toggle_inbox(this.app);
    };
    this.addCommand({
      id: "ethan:toggle-inbox",
      name: "Toggle inbox",
      callback: toggle_inbox_cb
    });
    const append_task_cb = () => {
      append_task(this.app);
    };
    this.addCommand({
      id: "ethan:append-task",
      name: "Append Task",
      callback: append_task_cb
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBBcHAsIE1hcmtkb3duVmlldywgTm90aWNlLCBnZXRBbGxUYWdzLCBwYXJzZUZyb250TWF0dGVyVGFncywgVEZvbGRlciwgVEZpbGV9IGZyb20gJ29ic2lkaWFuJztcblxuY29uc3QgVU5JUVVFX05PVEVfVEVNUExBVEUgPSBcIlVuaXF1ZSBOb3RlIEluYm94IFRlbXBsYXRlXCI7XG5jb25zdCBVTklRVUVfTk9URV9QQVRIID1cbiAgICBcIjAwLTA5IFx1RDgzRFx1RENCRSBTeXN0ZW0vMDIgT2JzaWRpYW4vMDIuMDAgTm90ZXNcIjtcbmNvbnN0IElOQk9YX1BBVEggPSBcIjcwLTc5IFx1MjYxMVx1RkUwRiBQcm9kdWN0aXZpdHkvNzAgU3lzdGVtLzcwLjAxIFx1RDgzRFx1RENFNSBJbmJveFwiO1xuY29uc3QgVEFTS1NfUEFUSCA9IFwiNzAtNzkgXHUyNjExXHVGRTBGIFByb2R1Y3Rpdml0eS83MCBTeXN0ZW0vNzAuMDIgVGFza3MvRmxvYXRpbmcgVGFza3MubWRcIjtcblxuZnVuY3Rpb24gb3Blbl9pbmJveF9ub3RlKGFwcDogQXBwKSB7XG4gICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXG4gICAgbGV0IGluYm94RmlsZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgY29uc3QgbWMgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgIGlmIChtYyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YWdzID0gZ2V0QWxsVGFncyhtYyk7XG4gICAgICAgIGlmICh0YWdzID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhZ3MuaW5jbHVkZXMoXCIjaW5ib3hcIilcbiAgICAgICAgICAgICYmIGZpbGUucGF0aC5zZWFyY2goXCJUZW1wbGF0ZXNcIikgPT0gLTEpIHtcbiAgICAgICAgICAgIGluYm94RmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKElOQk9YX1BBVEgpO1xuICAgIGlmIChmb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSB7XG4gICAgICAgIGZvciAoY29uc3QgZiBvZiBmb2xkZXIuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChmIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICBpbmJveEZpbGVzLnB1c2goZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbmJveEZpbGVzLnNvcnQoKChhLCBiKSA9PiBiLnN0YXQuY3RpbWUgLSBhLnN0YXQuY3RpbWUpKTtcblxuICAgIGlmIChpbmJveEZpbGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICBpZiAoYWN0aXZlRmlsZSAhPT0gbnVsbCkge1xuICAgICAgICBpbmRleCA9IGluYm94RmlsZXMuZmluZEluZGV4KG9iaiA9PiBvYmogPT0gYWN0aXZlRmlsZSk7IC8vIFdlIHdhbnQgdGhlIG5leHQgZmlsZS5cbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IChpbmRleCArIDEpICUgaW5ib3hGaWxlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkub3BlbkZpbGUoaW5ib3hGaWxlc1tpbmRleF0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiB1bmlxdWVfbm90ZShhcHA6IEFwcCkge1xuICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbmQoXG4gICAgICAgIGYgPT4gZi5iYXNlbmFtZSA9PSBVTklRVUVfTk9URV9URU1QTEFURSk7XG5cbiAgICBpZiAoZmlsZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuJ3QgZmluZDogXCIsIFVOSVFVRV9OT1RFX1RFTVBMQVRFKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICBsZXQgY29udGVudHMgPSBhd2FpdCBhcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcbiAgICBjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL3t7ZGF0ZX19L2csIGN1cnJlbnREYXRlKTtcblxuICAgIGxldCBzdGFtcCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg5KS50b1VwcGVyQ2FzZSgpO1xuICAgIGxldCBuYW1lID0gYCR7VU5JUVVFX05PVEVfUEFUSH0vJHtjdXJyZW50RGF0ZX0gJHtzdGFtcH0ubWRgO1xuICAgIGxldCBuZXdGaWxlID0gYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZShuYW1lLCBjb250ZW50cyk7XG4gICAgYXdhaXQgYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkub3BlbkZpbGUobmV3RmlsZSk7XG5cbiAgICBjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcbiAgICBpZiAodmlldyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICB2aWV3LmVkaXRvci5mb2N1cygpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjb3B5X21hcmtkb3duKGFwcDogQXBwKSB7XG4gICAgbGV0IGZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICBpZiAoZmlsZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgY29udGVudHMgPSBhd2FpdCBhcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcbiAgICBjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL14tLS1bXFxzXFxTXSo/LS0tLywgXCJcIik7XG4gICAgY29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKC9eW1xcc1xcU10qJSVcXHMqP1xcLVxcLVxcLVxccyo/JSUvLCBcIlwiKTtcbiAgICBjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL1xcW1xcWyguKj8pXFx8KC4qPylcXF1cXF0vZywgXCIkMlwiKTtcbiAgICBjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL1xcW1xcWyguKj8pXFxdXFxdL2csIFwiJDFcIik7XG4gICAgY29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKC8lJVtcXHNcXFNdKj8lJS9nLCBcIlwiKTtcbiAgICBjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL15cXHMqLywgXCJcIik7XG4gICAgY29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKC9cXHMqJC8sIFwiXCIpO1xuXG4gICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY29udGVudHMpO1xuICAgIG5ldyBOb3RpY2UoY29udGVudHMpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVfaW5ib3goYXBwOiBBcHApIHtcbiAgICBsZXQgZmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgIGlmIChmaWxlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgKGZtOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IHRhZ3MgPSBwYXJzZUZyb250TWF0dGVyVGFncyhmbSk7XG5cbiAgICAgICAgaWYgKHRhZ3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGFncyA9IFtcIiNpbmJveFwiXTtcbiAgICAgICAgfSBlbHNlIGlmICghdGFncy5pbmNsdWRlcyhcIiNpbmJveFwiKSkge1xuICAgICAgICAgICAgdGFncy5wdXNoKFwiI2luYm94XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFncyA9IHRhZ3MuZmlsdGVyKCh4IDpzdHJpbmcpID0+IHggIT09IFwiI2luYm94XCIpO1xuICAgICAgICB9XG4gICAgICAgIGZtLnRhZ3MgPSB0YWdzO1xuICAgICAgICByZXR1cm4gZm07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZF90YXNrKGFwcDogQXBwKSB7XG4gICAgY29uc3QgZWRpdG9yID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk/LmVkaXRvcjtcbiAgICBpZiAoZWRpdG9yID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpO1xuXG4gICAgZWRpdG9yLnJlcGxhY2VSYW5nZShcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbGluZTogY3Vyc29yLmxpbmUgKyAxLCBjaDogMCB9KTtcblxuICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFRBU0tTX1BBVEgpO1xuICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgdGhpcy5hcHAudmF1bHQuYXBwZW5kKGZpbGUsIFwiXFxuXCIgKyBsaW5lQ29udGVudCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdGhhblV0aWwgZXh0ZW5kcyBQbHVnaW4ge1xuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgLy8gSW5ib3ggTmV4dFxuICAgICAgICBjb25zdCBpbmJveF9uZXh0X2NiID0gICgpID0+IHtcbiAgICAgICAgICAgIG9wZW5faW5ib3hfbm90ZSh0aGlzLmFwcCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnZXRoYW46aW5ib3gtbmV4dCcsXG4gICAgICAgICAgICBuYW1lOiAnTmV4dCBpbmJveCcsXG4gICAgICAgICAgICBjYWxsYmFjazogaW5ib3hfbmV4dF9jYixcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbihcIm1haWxzXCIsIFwiTmV4dCBJbmJveFwiLCBpbmJveF9uZXh0X2NiKTtcblxuXG4gICAgICAgIC8vIERlbGV0ZSBhbmQgSW5ib3ggTmV4dFxuICAgICAgICBjb25zdCBkZWxldGVfaW5ib3hfY2IgPSAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgICAgICBvcGVuX2luYm94X25vdGUodGhpcy5hcHApO1xuICAgICAgICAgICAgaWYgKGZpbGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC50cmFzaChmaWxlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnZXRoYW46ZGVsZXRlLWluYm94LW5leHQnLFxuICAgICAgICAgICAgbmFtZTogJ0RlbGV0ZScsXG4gICAgICAgICAgICBjYWxsYmFjazogZGVsZXRlX2luYm94X2NiLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKFwidHJhc2hcIiwgXCJEZWxldGUsIE9wZW4gSW5ib3hcIiwgZGVsZXRlX2luYm94X2NiKTtcblxuXG4gICAgICAgIC8vIFVuaXF1ZSBOb3RlXG4gICAgICAgIGNvbnN0IG5ld19ub3RlX2NiID0gKCkgPT4ge1xuICAgICAgICAgICAgdW5pcXVlX25vdGUodGhpcy5hcHApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdldGhhbjp1bmlxdWUtbm90ZScsXG4gICAgICAgICAgICBuYW1lOiAnTmV3IG5vdGUnLFxuICAgICAgICAgICAgY2FsbGJhY2s6IG5ld19ub3RlX2NiLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oXCJmaWxlLXBsdXMtMlwiLCBcIkNyZWF0ZSBVbmlxdWUgbm90ZVwiLCBuZXdfbm90ZV9jYik7XG5cbiAgICAgICAgLy8gQ29weSBNYXJrZG93blxuICAgICAgICBjb25zdCBjb3B5X21hcmtkb3duX2NiID0gKCkgPT4ge1xuICAgICAgICAgICAgY29weV9tYXJrZG93bih0aGlzLmFwcCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2V0aGFuOmNvcHktbWFya2Rvd24nLFxuICAgICAgICAgICAgbmFtZTogJ0NvcHkgbWFya2Rvd24nLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGNvcHlfbWFya2Rvd25fY2IsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRvZ2dsZSBJbmJveFxuICAgICAgICBjb25zdCB0b2dnbGVfaW5ib3hfY2IgPSAoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGVfaW5ib3godGhpcy5hcHApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdldGhhbjp0b2dnbGUtaW5ib3gnLFxuICAgICAgICAgICAgbmFtZTogJ1RvZ2dsZSBpbmJveCcsXG4gICAgICAgICAgICBjYWxsYmFjazogdG9nZ2xlX2luYm94X2NiLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhcHBlbmRfdGFza19jYiA9ICgpID0+IHtcbiAgICAgICAgICAgIGFwcGVuZF90YXNrKHRoaXMuYXBwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnZXRoYW46YXBwZW5kLXRhc2snLFxuICAgICAgICAgICAgbmFtZTogJ0FwcGVuZCBUYXNrJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhcHBlbmRfdGFza19jYixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFtRztBQUVuRyxJQUFNLHVCQUF1QjtBQUM3QixJQUFNLG1CQUNGO0FBQ0osSUFBTSxhQUFhO0FBQ25CLElBQU0sYUFBYTtBQUVuQixTQUFTLGdCQUFnQixLQUFVO0FBQy9CLFFBQU0sUUFBUSxJQUFJLE1BQU0saUJBQWlCO0FBRXpDLE1BQUksYUFBYSxDQUFDO0FBQ2xCLGFBQVcsUUFBUSxPQUFPO0FBQ3RCLFVBQU0sS0FBSyxJQUFJLGNBQWMsYUFBYSxJQUFJO0FBQzlDLFFBQUksTUFBTSxNQUFNO0FBQ1o7QUFBQSxJQUNKO0FBRUEsUUFBSSxXQUFPLDRCQUFXLEVBQUU7QUFDeEIsUUFBSSxRQUFRLE1BQU07QUFDZDtBQUFBLElBQ0o7QUFFQSxRQUFJLEtBQUssU0FBUyxRQUFRLEtBQ25CLEtBQUssS0FBSyxPQUFPLFdBQVcsS0FBSyxJQUFJO0FBQ3hDLGlCQUFXLEtBQUssSUFBSTtBQUFBLElBQ3hCO0FBQUEsRUFDSjtBQUVBLE1BQUksU0FBUyxJQUFJLE1BQU0sc0JBQXNCLFVBQVU7QUFDdkQsTUFBSSxrQkFBa0IseUJBQVM7QUFDM0IsZUFBVyxLQUFLLE9BQU8sVUFBVTtBQUM3QixVQUFJLGFBQWEsdUJBQU87QUFDcEIsbUJBQVcsS0FBSyxDQUFDO0FBQUEsTUFDckI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUVBLGFBQVcsS0FBTSxDQUFDLEdBQUcsTUFBTSxFQUFFLEtBQUssUUFBUSxFQUFFLEtBQUssS0FBTTtBQUV2RCxNQUFJLFdBQVcsVUFBVSxHQUFHO0FBQ3hCO0FBQUEsRUFDSjtBQUVBLE1BQUksUUFBUTtBQUNaLE1BQUksYUFBYSxLQUFLLElBQUksVUFBVSxjQUFjO0FBQ2xELE1BQUksZUFBZSxNQUFNO0FBQ3JCLFlBQVEsV0FBVyxVQUFVLFNBQU8sT0FBTyxVQUFVO0FBQ3JELFFBQUksUUFBUSxHQUFHO0FBQ1gsY0FBUTtBQUFBLElBQ1o7QUFDQSxhQUFTLFFBQVEsS0FBSyxXQUFXO0FBQUEsRUFDckM7QUFFQSxNQUFJLFVBQVUsUUFBUSxFQUFFLFNBQVMsV0FBVyxLQUFLLENBQUM7QUFDdEQ7QUFFQSxlQUFlLFlBQVksS0FBVTtBQUNqQyxRQUFNLE9BQU8sSUFBSSxNQUFNLGlCQUFpQixFQUFFO0FBQUEsSUFDdEMsT0FBSyxFQUFFLFlBQVk7QUFBQSxFQUFvQjtBQUUzQyxNQUFJLFFBQVEsTUFBTTtBQUNkLFlBQVEsSUFBSSxnQkFBZ0Isb0JBQW9CO0FBQ2hELFdBQU87QUFBQSxFQUNYO0FBRUEsTUFBSSxjQUFjLElBQUksS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEdBQUcsRUFBRTtBQUN0RCxNQUFJLFdBQVcsTUFBTSxJQUFJLE1BQU0sV0FBVyxJQUFJO0FBQzlDLGFBQVcsU0FBUyxRQUFRLGFBQWEsV0FBVztBQUVwRCxNQUFJLFFBQVEsS0FBSyxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUUsWUFBWTtBQUNoRSxNQUFJLE9BQU8sR0FBRyxvQkFBb0IsZUFBZTtBQUNqRCxNQUFJLFVBQVUsTUFBTSxJQUFJLE1BQU0sT0FBTyxNQUFNLFFBQVE7QUFDbkQsUUFBTSxJQUFJLFVBQVUsUUFBUSxFQUFFLFNBQVMsT0FBTztBQUU5QyxRQUFNLE9BQU8sS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDRCQUFZO0FBQ2hFLE1BQUksUUFBUSxNQUFNO0FBQ2Q7QUFBQSxFQUNKO0FBQ0EsT0FBSyxPQUFPLE1BQU07QUFDdEI7QUFFQSxlQUFlLGNBQWMsS0FBVTtBQUNuQyxNQUFJLE9BQU8sSUFBSSxVQUFVLGNBQWM7QUFDdkMsTUFBSSxRQUFRLE1BQU07QUFDZDtBQUFBLEVBQ0o7QUFFQSxNQUFJLFdBQVcsTUFBTSxJQUFJLE1BQU0sV0FBVyxJQUFJO0FBQzlDLGFBQVcsU0FBUyxRQUFRLG1CQUFtQixFQUFFO0FBQ2pELGFBQVcsU0FBUyxRQUFRLDhCQUE4QixFQUFFO0FBQzVELGFBQVcsU0FBUyxRQUFRLHlCQUF5QixJQUFJO0FBQ3pELGFBQVcsU0FBUyxRQUFRLGtCQUFrQixJQUFJO0FBQ2xELGFBQVcsU0FBUyxRQUFRLGlCQUFpQixFQUFFO0FBQy9DLGFBQVcsU0FBUyxRQUFRLFFBQVEsRUFBRTtBQUN0QyxhQUFXLFNBQVMsUUFBUSxRQUFRLEVBQUU7QUFFdEMsUUFBTSxVQUFVLFVBQVUsVUFBVSxRQUFRO0FBQzVDLE1BQUksdUJBQU8sUUFBUTtBQUN2QjtBQUVBLFNBQVMsYUFBYSxLQUFVO0FBQzVCLE1BQUksT0FBTyxJQUFJLFVBQVUsY0FBYztBQUN2QyxNQUFJLFFBQVEsTUFBTTtBQUNkO0FBQUEsRUFDSjtBQUVBLE1BQUksWUFBWSxtQkFBbUIsTUFBTSxDQUFDLE9BQVk7QUFDbEQsUUFBSSxXQUFPLHNDQUFxQixFQUFFO0FBRWxDLFFBQUksUUFBUSxNQUFNO0FBQ2QsYUFBTyxDQUFDLFFBQVE7QUFBQSxJQUNwQixXQUFXLENBQUMsS0FBSyxTQUFTLFFBQVEsR0FBRztBQUNqQyxXQUFLLEtBQUssUUFBUTtBQUFBLElBQ3RCLE9BQU87QUFDSCxhQUFPLEtBQUssT0FBTyxDQUFDLE1BQWMsTUFBTSxRQUFRO0FBQUEsSUFDcEQ7QUFDQSxPQUFHLE9BQU87QUFDVixXQUFPO0FBQUEsRUFDWCxDQUFDO0FBQ0w7QUFFQSxTQUFTLFlBQVksS0FBVTtBQTFIL0I7QUEySEksUUFBTSxVQUFTLFNBQUksVUFBVSxvQkFBb0IsNEJBQVksTUFBOUMsbUJBQWlEO0FBQ2hFLE1BQUksVUFBVSxNQUFNO0FBQ2hCO0FBQUEsRUFDSjtBQUVBLFFBQU0sU0FBUyxPQUFPLFVBQVU7QUFDaEMsUUFBTSxjQUFjLE9BQU8sUUFBUSxPQUFPLElBQUk7QUFFOUMsU0FBTztBQUFBLElBQWE7QUFBQSxJQUNBLEVBQUUsTUFBTSxPQUFPLE1BQU0sSUFBSSxFQUFFO0FBQUEsSUFDM0IsRUFBRSxNQUFNLE9BQU8sT0FBTyxHQUFHLElBQUksRUFBRTtBQUFBLEVBQUM7QUFFcEQsUUFBTSxPQUFPLElBQUksTUFBTSxzQkFBc0IsVUFBVTtBQUN2RCxNQUFJLGdCQUFnQix1QkFBTztBQUN2QixTQUFLLElBQUksTUFBTSxPQUFPLE1BQU0sT0FBTyxXQUFXO0FBQUEsRUFDbEQ7QUFDSjtBQUVBLElBQXFCLFlBQXJCLGNBQXVDLHVCQUFPO0FBQUEsRUFDMUMsTUFBTSxTQUFTO0FBRVgsVUFBTSxnQkFBaUIsTUFBTTtBQUN6QixzQkFBZ0IsS0FBSyxHQUFHO0FBQUEsSUFDNUI7QUFFQSxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVU7QUFBQSxJQUNkLENBQUM7QUFDRCxTQUFLLGNBQWMsU0FBUyxjQUFjLGFBQWE7QUFJdkQsVUFBTSxrQkFBa0IsTUFBTTtBQUMxQixVQUFJLE9BQU8sS0FBSyxJQUFJLFVBQVUsY0FBYztBQUM1QyxzQkFBZ0IsS0FBSyxHQUFHO0FBQ3hCLFVBQUksU0FBUyxNQUFNO0FBQ2YsYUFBSyxJQUFJLE1BQU0sTUFBTSxNQUFNLEtBQUs7QUFBQSxNQUNwQztBQUFBLElBQ0o7QUFFQSxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVU7QUFBQSxJQUNkLENBQUM7QUFDRCxTQUFLLGNBQWMsU0FBUyxzQkFBc0IsZUFBZTtBQUlqRSxVQUFNLGNBQWMsTUFBTTtBQUN0QixrQkFBWSxLQUFLLEdBQUc7QUFBQSxJQUN4QjtBQUNBLFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ2QsQ0FBQztBQUVELFNBQUssY0FBYyxlQUFlLHNCQUFzQixXQUFXO0FBR25FLFVBQU0sbUJBQW1CLE1BQU07QUFDM0Isb0JBQWMsS0FBSyxHQUFHO0FBQUEsSUFDMUI7QUFDQSxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVU7QUFBQSxJQUNkLENBQUM7QUFHRCxVQUFNLGtCQUFrQixNQUFNO0FBQzFCLG1CQUFhLEtBQUssR0FBRztBQUFBLElBQ3pCO0FBQ0EsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVO0FBQUEsSUFDZCxDQUFDO0FBRUQsVUFBTSxpQkFBaUIsTUFBTTtBQUN6QixrQkFBWSxLQUFLLEdBQUc7QUFBQSxJQUN4QjtBQUNBLFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ2QsQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUFDO0FBQ2hCOyIsCiAgIm5hbWVzIjogW10KfQo=

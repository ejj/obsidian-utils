/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UNIQUE_NOTE_TEMPLATE = "Unique Note Inbox Template";
function open_inbox_note(app) {
  var _a, _b, _c;
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    let fileCache = app.metadataCache.getFileCache(file);
    let tags = ((_a = fileCache == null ? void 0 : fileCache.tags) == null ? void 0 : _a.map((tagCache) => tagCache.tag)) || [];
    let fmtags = (_c = (_b = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b.tags) == null ? void 0 : _c.map((t) => `#${t}`);
    tags.push(...fmtags || []);
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  inboxFiles.sort((a, b) => b.stat.ctime - a.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = 0;
  let activeFile = this.app.workspace.getActiveFile();
  if (activeFile !== null) {
    index = inboxFiles.findIndex((obj) => obj == activeFile);
    if (index < 0) {
      index = -1;
    }
    index = (index + 1) % inboxFiles.length;
  }
  app.workspace.openLinkText(inboxFiles[index].basename, "", false, {
    active: true
  });
}
async function unique_note(app) {
  let currentDate = new Date().toISOString().slice(0, 10);
  let stamp = Math.random().toString(36).substring(9).toUpperCase();
  let name = `${currentDate} ${stamp}.md`;
  const file = app.vault.getMarkdownFiles().find(
    (f) => f.basename == UNIQUE_NOTE_TEMPLATE
  );
  if (file == null) {
    console.log("Can't find: ", UNIQUE_NOTE_TEMPLATE);
    return null;
  }
  let contents = await app.vault.cachedRead(file);
  contents = contents.replace(/{{date}}/g, currentDate);
  let newFile = await app.vault.create(name, contents);
  await app.workspace.openLinkText(newFile.basename, "", false, {
    active: true
  });
  const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (view == null) {
    return;
  }
  console.log("here");
  view.editor.focus();
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    const inbox_next_cb = () => {
      open_inbox_note(this.app);
    };
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next Inbox",
      callback: inbox_next_cb
    });
    this.addRibbonIcon("mails", "Next Inbox", inbox_next_cb);
    const delete_inbox_next_cb = () => {
      let file = this.app.workspace.getActiveFile();
      open_inbox_note(this.app);
      if (file !== null) {
        this.app.vault.trash(file, false);
      }
    };
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete",
      callback: delete_inbox_next_cb
    });
    this.addRibbonIcon(
      "trash",
      "Delete, Open Inbox",
      delete_inbox_next_cb
    );
    const unique_note_cb = () => {
      unique_note(this.app);
    };
    this.addCommand({
      id: "ethan:unique-note",
      name: "New Note",
      callback: unique_note_cb
    });
    this.addRibbonIcon(
      "file-plus-2",
      "Create Unique note",
      unique_note_cb
    );
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBBcHAsIE1hcmtkb3duVmlld30gZnJvbSAnb2JzaWRpYW4nO1xuXG5jb25zdCBVTklRVUVfTk9URV9URU1QTEFURSA9IFwiVW5pcXVlIE5vdGUgSW5ib3ggVGVtcGxhdGVcIjtcblxuZnVuY3Rpb24gb3Blbl9pbmJveF9ub3RlKGFwcDogQXBwKSB7XG5cdC8vIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXHRjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cblx0bGV0IGluYm94RmlsZXMgPSBbXTtcblx0Zm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG5cdFx0bGV0IGZpbGVDYWNoZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcblx0XHRsZXQgdGFncyA9IGZpbGVDYWNoZT8udGFncz8ubWFwKHRhZ0NhY2hlID0+IHRhZ0NhY2hlLnRhZykgfHwgW107XG5cdFx0bGV0IGZtdGFncyA9IGZpbGVDYWNoZT8uZnJvbnRtYXR0ZXI/LnRhZ3M/Lm1hcCgodCA6c3RyaW5nKSA9PiBgIyR7dH1gKTtcblx0XHR0YWdzLnB1c2goLi4uZm10YWdzIHx8IFtdKTtcblxuXHRcdGlmICh0YWdzLmluY2x1ZGVzKFwiI2luYm94XCIpXG5cdFx0XHQmJiBmaWxlLnBhdGguc2VhcmNoKFwiVGVtcGxhdGVzXCIpID09IC0xKSB7XG5cdFx0XHRpbmJveEZpbGVzLnB1c2goZmlsZSk7XG5cdFx0fVxuXHR9XG5cblx0aW5ib3hGaWxlcy5zb3J0KCgoYSwgYikgPT4gYi5zdGF0LmN0aW1lIC0gYS5zdGF0LmN0aW1lKSk7XG5cblx0aWYgKGluYm94RmlsZXMubGVuZ3RoID09IDApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdGlmIChhY3RpdmVGaWxlICE9PSBudWxsKSB7XG5cdFx0aW5kZXggPSBpbmJveEZpbGVzLmZpbmRJbmRleChvYmogPT4gb2JqID09IGFjdGl2ZUZpbGUpOyAvLyBXZSB3YW50IHRoZSBuZXh0IGZpbGUuXG5cdFx0aWYgKGluZGV4IDwgMCkge1xuXHRcdFx0aW5kZXggPSAtMTtcblx0XHR9XG5cdFx0aW5kZXggPSAoaW5kZXggKyAxKSAlIGluYm94RmlsZXMubGVuZ3RoO1xuXHR9XG5cblx0YXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQoaW5ib3hGaWxlc1tpbmRleF0uYmFzZW5hbWUsICcnLCBmYWxzZSwge1xuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0fSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gdW5pcXVlX25vdGUoYXBwOiBBcHApIHtcblx0bGV0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcblx0bGV0IHN0YW1wID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDkpLnRvVXBwZXJDYXNlKCk7XG5cdGxldCBuYW1lID0gYCR7Y3VycmVudERhdGV9ICR7c3RhbXB9Lm1kYDtcblxuXHRjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5maW5kKFxuXHRcdGYgPT4gZi5iYXNlbmFtZSA9PSBVTklRVUVfTk9URV9URU1QTEFURSk7XG5cblx0aWYgKGZpbGUgPT0gbnVsbCkge1xuXHRcdGNvbnNvbGUubG9nKFwiQ2FuJ3QgZmluZDogXCIsIFVOSVFVRV9OT1RFX1RFTVBMQVRFKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGxldCBjb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuXHRjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL3t7ZGF0ZX19L2csIGN1cnJlbnREYXRlKTtcblxuXHRsZXQgbmV3RmlsZSA9IGF3YWl0IGFwcC52YXVsdC5jcmVhdGUobmFtZSwgY29udGVudHMpO1xuXHRhd2FpdCBhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChuZXdGaWxlLmJhc2VuYW1lLCBcIlwiLCBmYWxzZSwge1xuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0fSk7XG5cblx0Y29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdGlmICh2aWV3ID09IG51bGwpIHtcblx0XHRyZXR1cm5cblx0fVxuXHRjb25zb2xlLmxvZyhcImhlcmVcIik7XG5cdHZpZXcuZWRpdG9yLmZvY3VzKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV0aGFuVXRpbCBleHRlbmRzIFBsdWdpbiB7XG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHQvLyBJbmJveCBOZXh0XG5cdFx0Y29uc3QgaW5ib3hfbmV4dF9jYiA9ICAoKSA9PiB7XG5cdFx0XHRvcGVuX2luYm94X25vdGUodGhpcy5hcHApO1xuXHRcdH07XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdldGhhbjppbmJveC1uZXh0Jyxcblx0XHRcdG5hbWU6ICdOZXh0IEluYm94Jyxcblx0XHRcdGNhbGxiYWNrOiBpbmJveF9uZXh0X2NiLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcIm1haWxzXCIsIFwiTmV4dCBJbmJveFwiLCBpbmJveF9uZXh0X2NiKTtcblxuXG5cdFx0Ly8gRGVsZXRlIGFuZCBJbmJveCBOZXh0XG5cdFx0Y29uc3QgZGVsZXRlX2luYm94X25leHRfY2IgPSAoKSA9PiB7XG5cdFx0XHRsZXQgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRvcGVuX2luYm94X25vdGUodGhpcy5hcHApO1xuXHRcdFx0aWYgKGZpbGUgIT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5hcHAudmF1bHQudHJhc2goZmlsZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2V0aGFuOmRlbGV0ZS1pbmJveC1uZXh0Jyxcblx0XHRcdG5hbWU6ICdEZWxldGUnLFxuXHRcdFx0Y2FsbGJhY2s6IGRlbGV0ZV9pbmJveF9uZXh0X2NiLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcInRyYXNoXCIsXG5cdFx0XHRcdFx0XHQgICBcIkRlbGV0ZSwgT3BlbiBJbmJveFwiLCBkZWxldGVfaW5ib3hfbmV4dF9jYik7XG5cblxuXHQgICAvLyBVbmlxdWUgTm90ZVxuXHQgICBjb25zdCB1bmlxdWVfbm90ZV9jYiA9ICgpID0+IHtcblx0XHQgICB1bmlxdWVfbm90ZSh0aGlzLmFwcCk7XG5cdCAgIH1cblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2V0aGFuOnVuaXF1ZS1ub3RlJyxcblx0XHRcdG5hbWU6ICdOZXcgTm90ZScsXG5cdFx0XHRjYWxsYmFjazogdW5pcXVlX25vdGVfY2Jcblx0XHR9KTtcblxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcImZpbGUtcGx1cy0yXCIsXG5cdFx0XHRcdFx0XHQgICBcIkNyZWF0ZSBVbmlxdWUgbm90ZVwiLCB1bmlxdWVfbm90ZV9jYik7XG5cdH1cblxuXHRvbnVubG9hZCgpIHt9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXlDO0FBRXpDLElBQU0sdUJBQXVCO0FBRTdCLFNBQVMsZ0JBQWdCLEtBQVU7QUFKbkM7QUFNQyxRQUFNLFFBQVEsSUFBSSxNQUFNLGlCQUFpQjtBQUV6QyxNQUFJLGFBQWEsQ0FBQztBQUNsQixhQUFXLFFBQVEsT0FBTztBQUN6QixRQUFJLFlBQVksSUFBSSxjQUFjLGFBQWEsSUFBSTtBQUNuRCxRQUFJLFNBQU8sNENBQVcsU0FBWCxtQkFBaUIsSUFBSSxjQUFZLFNBQVMsU0FBUSxDQUFDO0FBQzlELFFBQUksVUFBUyxrREFBVyxnQkFBWCxtQkFBd0IsU0FBeEIsbUJBQThCLElBQUksQ0FBQyxNQUFjLElBQUk7QUFDbEUsU0FBSyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUM7QUFFekIsUUFBSSxLQUFLLFNBQVMsUUFBUSxLQUN0QixLQUFLLEtBQUssT0FBTyxXQUFXLEtBQUssSUFBSTtBQUN4QyxpQkFBVyxLQUFLLElBQUk7QUFBQSxJQUNyQjtBQUFBLEVBQ0Q7QUFFQSxhQUFXLEtBQU0sQ0FBQyxHQUFHLE1BQU0sRUFBRSxLQUFLLFFBQVEsRUFBRSxLQUFLLEtBQU07QUFFdkQsTUFBSSxXQUFXLFVBQVUsR0FBRztBQUMzQjtBQUFBLEVBQ0Q7QUFFQSxNQUFJLFFBQVE7QUFDWixNQUFJLGFBQWEsS0FBSyxJQUFJLFVBQVUsY0FBYztBQUNsRCxNQUFJLGVBQWUsTUFBTTtBQUN4QixZQUFRLFdBQVcsVUFBVSxTQUFPLE9BQU8sVUFBVTtBQUNyRCxRQUFJLFFBQVEsR0FBRztBQUNkLGNBQVE7QUFBQSxJQUNUO0FBQ0EsYUFBUyxRQUFRLEtBQUssV0FBVztBQUFBLEVBQ2xDO0FBRUEsTUFBSSxVQUFVLGFBQWEsV0FBVyxLQUFLLEVBQUUsVUFBVSxJQUFJLE9BQU87QUFBQSxJQUNqRSxRQUFRO0FBQUEsRUFDVCxDQUFDO0FBQ0Y7QUFFQSxlQUFlLFlBQVksS0FBVTtBQUNwQyxNQUFJLGNBQWMsSUFBSSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxFQUFFO0FBQ3RELE1BQUksUUFBUSxLQUFLLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZO0FBQ2hFLE1BQUksT0FBTyxHQUFHLGVBQWU7QUFFN0IsUUFBTSxPQUFPLElBQUksTUFBTSxpQkFBaUIsRUFBRTtBQUFBLElBQ3pDLE9BQUssRUFBRSxZQUFZO0FBQUEsRUFBb0I7QUFFeEMsTUFBSSxRQUFRLE1BQU07QUFDakIsWUFBUSxJQUFJLGdCQUFnQixvQkFBb0I7QUFDaEQsV0FBTztBQUFBLEVBQ1I7QUFFQSxNQUFJLFdBQVcsTUFBTSxJQUFJLE1BQU0sV0FBVyxJQUFJO0FBQzlDLGFBQVcsU0FBUyxRQUFRLGFBQWEsV0FBVztBQUVwRCxNQUFJLFVBQVUsTUFBTSxJQUFJLE1BQU0sT0FBTyxNQUFNLFFBQVE7QUFDbkQsUUFBTSxJQUFJLFVBQVUsYUFBYSxRQUFRLFVBQVUsSUFBSSxPQUFPO0FBQUEsSUFDN0QsUUFBUTtBQUFBLEVBQ1QsQ0FBQztBQUVELFFBQU0sT0FBTyxLQUFLLElBQUksVUFBVSxvQkFBb0IsNEJBQVk7QUFDaEUsTUFBSSxRQUFRLE1BQU07QUFDakI7QUFBQSxFQUNEO0FBQ0EsVUFBUSxJQUFJLE1BQU07QUFDbEIsT0FBSyxPQUFPLE1BQU07QUFDbkI7QUFFQSxJQUFxQixZQUFyQixjQUF1Qyx1QkFBTztBQUFBLEVBQzdDLE1BQU0sU0FBUztBQUVkLFVBQU0sZ0JBQWlCLE1BQU07QUFDNUIsc0JBQWdCLEtBQUssR0FBRztBQUFBLElBQ3pCO0FBRUEsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVO0FBQUEsSUFDWCxDQUFDO0FBQ0QsU0FBSyxjQUFjLFNBQVMsY0FBYyxhQUFhO0FBSXZELFVBQU0sdUJBQXVCLE1BQU07QUFDbEMsVUFBSSxPQUFPLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFDNUMsc0JBQWdCLEtBQUssR0FBRztBQUN4QixVQUFJLFNBQVMsTUFBTTtBQUNsQixhQUFLLElBQUksTUFBTSxNQUFNLE1BQU0sS0FBSztBQUFBLE1BQ2pDO0FBQUEsSUFDRDtBQUVBLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ1gsQ0FBQztBQUNELFNBQUs7QUFBQSxNQUFjO0FBQUEsTUFDWjtBQUFBLE1BQXNCO0FBQUEsSUFBb0I7QUFJL0MsVUFBTSxpQkFBaUIsTUFBTTtBQUM1QixrQkFBWSxLQUFLLEdBQUc7QUFBQSxJQUNyQjtBQUVGLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ1gsQ0FBQztBQUVELFNBQUs7QUFBQSxNQUFjO0FBQUEsTUFDWjtBQUFBLE1BQXNCO0FBQUEsSUFBYztBQUFBLEVBQzVDO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFBQztBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function open_inbox_note(app, nextNoteSeq) {
  var _a, _b;
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    let fileCache = app.metadataCache.getFileCache(file);
    let tags = ((_a = fileCache == null ? void 0 : fileCache.tags) == null ? void 0 : _a.map((tagCache) => tagCache.tag)) || [];
    let fmtags = (_b = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b.tags.map((t) => `#${t}`);
    tags.push(...fmtags || []);
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  inboxFiles.sort((a, b) => a.stat.ctime - b.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = nextNoteSeq % inboxFiles.length;
  app.workspace.openLinkText(inboxFiles[index].basename, "", false, {
    active: true
  });
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    let nextNoteSeq = 0;
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next Inbox Note",
      callback: () => {
        nextNoteSeq++;
        open_inbox_note(this.app, nextNoteSeq);
      }
    });
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete and Next Inbox Note",
      callback: () => {
        let file = this.app.workspace.getActiveFile();
        if (file != null) {
          this.app.vault.trash(file, false);
        }
        open_inbox_note(this.app, nextNoteSeq);
      }
    });
  }
  onunload() {
  }
};

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UNIQUE_NOTE_TEMPLATE = "Unique Note Inbox Template";
function open_inbox_note(app) {
  var _a, _b, _c;
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    let fileCache = app.metadataCache.getFileCache(file);
    let tags = ((_a = fileCache == null ? void 0 : fileCache.tags) == null ? void 0 : _a.map((tagCache) => tagCache.tag)) || [];
    let fmtags = (_c = (_b = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b.tags) == null ? void 0 : _c.map((t) => `#${t}`);
    tags.push(...fmtags || []);
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  inboxFiles.sort((a, b) => b.stat.ctime - a.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = 0;
  let activeFile = this.app.workspace.getActiveFile();
  if (activeFile !== null) {
    index = inboxFiles.findIndex((obj) => obj == activeFile);
    if (index < 0) {
      index = -1;
    }
    index = (index + 1) % inboxFiles.length;
  }
  app.workspace.openLinkText(inboxFiles[index].basename, "", false, {
    active: true
  });
}
async function unique_note(app) {
  let name = Math.trunc(new Date().getTime() / 1e3).toString().substring(3);
  const file = app.vault.getMarkdownFiles().find(
    (f) => f.basename == UNIQUE_NOTE_TEMPLATE
  );
  if (file == null) {
    console.log("Can't find: ", UNIQUE_NOTE_TEMPLATE);
    return null;
  }
  let contents = await app.vault.cachedRead(file);
  let currentDate = new Date().toISOString().slice(0, 10);
  contents = contents.replace(/{{date}}/g, currentDate);
  console.log(contents);
  let newFile = await app.vault.create(`${name}.md`, contents);
  app.workspace.openLinkText(newFile.basename, "", false, {
    active: true
  });
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next Inbox Note",
      callback: () => {
        open_inbox_note(this.app);
      }
    });
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete and Next Inbox Note",
      callback: () => {
        let file = this.app.workspace.getActiveFile();
        open_inbox_note(this.app);
        if (file !== null) {
          this.app.vault.trash(file, false);
        }
      }
    });
    this.addCommand({
      id: "ethan:unique-note",
      name: "Ethan Unique Note",
      callback: () => {
        unique_note(this.app);
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBBcHB9IGZyb20gJ29ic2lkaWFuJztcblxuY29uc3QgVU5JUVVFX05PVEVfVEVNUExBVEUgPSBcIlVuaXF1ZSBOb3RlIEluYm94IFRlbXBsYXRlXCI7XG5cbmZ1bmN0aW9uIG9wZW5faW5ib3hfbm90ZShhcHA6IEFwcCkge1xuXHQvLyBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcblx0Y29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXG5cdGxldCBpbmJveEZpbGVzID0gW107XG5cdGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuXHRcdGxldCBmaWxlQ2FjaGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG5cdFx0bGV0IHRhZ3MgPSBmaWxlQ2FjaGU/LnRhZ3M/Lm1hcCh0YWdDYWNoZSA9PiB0YWdDYWNoZS50YWcpIHx8IFtdO1xuXHRcdGxldCBmbXRhZ3MgPSBmaWxlQ2FjaGU/LmZyb250bWF0dGVyPy50YWdzPy5tYXAoKHQgOnN0cmluZykgPT4gYCMke3R9YCk7XG5cdFx0dGFncy5wdXNoKC4uLmZtdGFncyB8fCBbXSk7XG5cblx0XHRpZiAodGFncy5pbmNsdWRlcyhcIiNpbmJveFwiKVxuXHRcdFx0JiYgZmlsZS5wYXRoLnNlYXJjaChcIlRlbXBsYXRlc1wiKSA9PSAtMSkge1xuXHRcdFx0aW5ib3hGaWxlcy5wdXNoKGZpbGUpO1xuXHRcdH1cblx0fVxuXG5cdGluYm94RmlsZXMuc29ydCgoKGEsIGIpID0+IGIuc3RhdC5jdGltZSAtIGEuc3RhdC5jdGltZSkpO1xuXG5cdGlmIChpbmJveEZpbGVzLmxlbmd0aCA9PSAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRpZiAoYWN0aXZlRmlsZSAhPT0gbnVsbCkge1xuXHRcdGluZGV4ID0gaW5ib3hGaWxlcy5maW5kSW5kZXgob2JqID0+IG9iaiA9PSBhY3RpdmVGaWxlKTsgLy8gV2Ugd2FudCB0aGUgbmV4dCBmaWxlLlxuXHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdGluZGV4ID0gLTE7XG5cdFx0fVxuXHRcdGluZGV4ID0gKGluZGV4ICsgMSkgJSBpbmJveEZpbGVzLmxlbmd0aDtcblx0fVxuXG5cdGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KGluYm94RmlsZXNbaW5kZXhdLmJhc2VuYW1lLCAnJywgZmFsc2UsIHtcblx0XHRhY3RpdmU6IHRydWUsXG5cdH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVuaXF1ZV9ub3RlKGFwcDogQXBwKSB7XG5cdGxldCBuYW1lID0gTWF0aC50cnVuYyhuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKS50b1N0cmluZygpLnN1YnN0cmluZygzKTtcblxuXHRjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5maW5kKFxuXHRcdGYgPT4gZi5iYXNlbmFtZSA9PSBVTklRVUVfTk9URV9URU1QTEFURSk7XG5cblx0aWYgKGZpbGUgPT0gbnVsbCkge1xuXHRcdGNvbnNvbGUubG9nKFwiQ2FuJ3QgZmluZDogXCIsIFVOSVFVRV9OT1RFX1RFTVBMQVRFKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGxldCBjb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuXHRsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL3t7ZGF0ZX19L2csIGN1cnJlbnREYXRlKTtcblx0Y29uc29sZS5sb2coY29udGVudHMpO1xuXG5cdGxldCBuZXdGaWxlID0gYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZShgJHtuYW1lfS5tZGAsIGNvbnRlbnRzKTtcblx0YXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQobmV3RmlsZS5iYXNlbmFtZSwgXCJcIiwgZmFsc2UsIHtcblx0XHRhY3RpdmU6IHRydWUsXG5cdH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdGhhblV0aWwgZXh0ZW5kcyBQbHVnaW4ge1xuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZXRoYW46aW5ib3gtbmV4dCcsXG5cdFx0XHRuYW1lOiAnTmV4dCBJbmJveCBOb3RlJyxcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdG9wZW5faW5ib3hfbm90ZSh0aGlzLmFwcCk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZXRoYW46ZGVsZXRlLWluYm94LW5leHQnLFxuXHRcdFx0bmFtZTogJ0RlbGV0ZSBhbmQgTmV4dCBJbmJveCBOb3RlJyxcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdGxldCBmaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRcdFx0b3Blbl9pbmJveF9ub3RlKHRoaXMuYXBwKTtcblx0XHRcdFx0aWYgKGZpbGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHR0aGlzLmFwcC52YXVsdC50cmFzaChmaWxlLCBmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2V0aGFuOnVuaXF1ZS1ub3RlJyxcblx0XHRcdG5hbWU6ICdFdGhhbiBVbmlxdWUgTm90ZScsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHR1bmlxdWVfbm90ZSh0aGlzLmFwcCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRvbnVubG9hZCgpIHt9XG59XG5cblxuIl0sCiAgIm1h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

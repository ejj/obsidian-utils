/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UNIQUE_NOTE_TEMPLATE = "Unique Note Inbox Template";
function open_inbox_note(app) {
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    const mc = app.metadataCache.getFileCache(file);
    if (mc == null) {
      continue;
    }
    let tags = (0, import_obsidian.getAllTags)(mc);
    if (tags == null) {
      continue;
    }
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  let folder = app.vault.getAbstractFileByPath("Inbox");
  if (folder instanceof import_obsidian.TFolder) {
    for (const f of folder.children) {
      if (f instanceof import_obsidian.TFile) {
        inboxFiles.push(f);
      }
    }
  }
  inboxFiles.sort((a, b) => b.stat.ctime - a.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = 0;
  let activeFile = this.app.workspace.getActiveFile();
  if (activeFile !== null) {
    index = inboxFiles.findIndex((obj) => obj == activeFile);
    if (index < 0) {
      index = -1;
    }
    index = (index + 1) % inboxFiles.length;
  }
  app.workspace.getLeaf().openFile(inboxFiles[index]);
}
async function unique_note(app) {
  let currentDate = new Date().toISOString().slice(0, 10);
  let stamp = Math.random().toString(36).substring(9).toUpperCase();
  let name = `${currentDate} ${stamp}.md`;
  const file = app.vault.getMarkdownFiles().find(
    (f) => f.basename == UNIQUE_NOTE_TEMPLATE
  );
  if (file == null) {
    console.log("Can't find: ", UNIQUE_NOTE_TEMPLATE);
    return null;
  }
  let contents = await app.vault.cachedRead(file);
  contents = contents.replace(/{{date}}/g, currentDate);
  let newFile = await app.vault.create(name, contents);
  await app.workspace.getLeaf().openFile(newFile);
  const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (view == null) {
    return;
  }
  view.editor.focus();
}
async function copy_markdown(app) {
  let file = app.workspace.getActiveFile();
  if (file == null) {
    return;
  }
  let contents = await app.vault.cachedRead(file);
  contents = contents.replace(/^---[\s\S]*?---/, "");
  contents = contents.replace(/^[\s\S]*%%\s*?\-\-\-\s*?%%/, "");
  contents = contents.replace(/\[\[(.*?)\|(.*?)\]\]/g, "$2");
  contents = contents.replace(/\[\[(.*?)\]\]/g, "$1");
  contents = contents.replace(/%%[\s\S]*?%%/g, "");
  contents = contents.replace(/^\s*/, "");
  contents = contents.replace(/\s*$/, "");
  await navigator.clipboard.writeText(contents);
  new import_obsidian.Notice(contents);
}
function toggle_inbox(app) {
  let file = app.workspace.getActiveFile();
  if (file == null) {
    return;
  }
  app.fileManager.processFrontMatter(file, (fm) => {
    let tags = (0, import_obsidian.parseFrontMatterTags)(fm);
    if (tags == null) {
      tags = ["#inbox"];
    } else if (!tags.includes("#inbox")) {
      tags.push("#inbox");
    } else {
      tags = tags.filter((x) => x !== "#inbox");
    }
    fm.tags = tags;
    return fm;
  });
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    const inbox_next_cb = () => {
      open_inbox_note(this.app);
    };
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next inbox",
      callback: inbox_next_cb
    });
    this.addRibbonIcon("mails", "Next Inbox", inbox_next_cb);
    const delete_inbox_cb = () => {
      let file = this.app.workspace.getActiveFile();
      open_inbox_note(this.app);
      if (file !== null) {
        this.app.vault.trash(file, false);
      }
    };
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete",
      callback: delete_inbox_cb
    });
    this.addRibbonIcon("trash", "Delete, Open Inbox", delete_inbox_cb);
    const new_note_cb = () => {
      unique_note(this.app);
    };
    this.addCommand({
      id: "ethan:unique-note",
      name: "New note",
      callback: new_note_cb
    });
    this.addRibbonIcon("file-plus-2", "Create Unique note", new_note_cb);
    const copy_markdown_cb = () => {
      copy_markdown(this.app);
    };
    this.addCommand({
      id: "ethan:copy-markdown",
      name: "Copy markdown",
      callback: copy_markdown_cb
    });
    const toggle_inbox_cb = () => {
      toggle_inbox(this.app);
    };
    this.addCommand({
      id: "ethan:toggle-inbox",
      name: "Toggle inbox",
      callback: toggle_inbox_cb
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UNIQUE_NOTE_TEMPLATE = "Unique Note Inbox Template";
function open_inbox_note(app) {
  var _a, _b, _c;
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    let fileCache = app.metadataCache.getFileCache(file);
    let tags = ((_a = fileCache == null ? void 0 : fileCache.tags) == null ? void 0 : _a.map((tagCache) => tagCache.tag)) || [];
    let fmtags = (_c = (_b = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b.tags) == null ? void 0 : _c.map((t) => `#${t}`);
    tags.push(...fmtags || []);
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  inboxFiles.sort((a, b) => b.stat.ctime - a.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = 0;
  let activeFile = this.app.workspace.getActiveFile();
  if (activeFile !== null) {
    index = inboxFiles.findIndex((obj) => obj == activeFile);
    if (index < 0) {
      index = -1;
    }
    index = (index + 1) % inboxFiles.length;
  }
  app.workspace.openLinkText(inboxFiles[index].basename, "", false, {
    active: true
  });
}
async function unique_note(app) {
  let name = Math.trunc(new Date().getTime() / 1e3).toString().substring(3);
  const file = app.vault.getMarkdownFiles().find(
    (f) => f.basename == UNIQUE_NOTE_TEMPLATE
  );
  if (file == null) {
    console.log("Can't find: ", UNIQUE_NOTE_TEMPLATE);
    return null;
  }
  let contents = await app.vault.cachedRead(file);
  let currentDate = new Date().toISOString().slice(0, 10);
  contents = contents.replace(/{{date}}/g, currentDate);
  let newFile = await app.vault.create(`${name}.md`, contents);
  await app.workspace.openLinkText(newFile.basename, "", false, {
    active: true
  });
  const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (view == null) {
    return;
  }
  console.log("here");
  view.editor.focus();
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next Inbox",
      callback: () => {
        open_inbox_note(this.app);
      }
    });
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete and Next Inbox",
      callback: () => {
        let file = this.app.workspace.getActiveFile();
        open_inbox_note(this.app);
        if (file !== null) {
          this.app.vault.trash(file, false);
        }
      }
    });
    this.addCommand({
      id: "ethan:unique-note",
      name: "Unique Note",
      callback: () => {
        unique_note(this.app);
      }
    });
    this.addCommand({
      id: "ethan:unique-task",
      name: "Unique Task",
      callback: async () => {
        await unique_note(this.app);
        this.app.commands.executeCommandById("obsidian-tasks-plugin:edit-task");
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBBcHAsIE1hcmtkb3duVmlld30gZnJvbSAnb2JzaWRpYW4nO1xuXG5jb25zdCBVTklRVUVfTk9URV9URU1QTEFURSA9IFwiVW5pcXVlIE5vdGUgSW5ib3ggVGVtcGxhdGVcIjtcblxuZnVuY3Rpb24gb3Blbl9pbmJveF9ub3RlKGFwcDogQXBwKSB7XG5cdC8vIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXHRjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cblx0bGV0IGluYm94RmlsZXMgPSBbXTtcblx0Zm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG5cdFx0bGV0IGZpbGVDYWNoZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcblx0XHRsZXQgdGFncyA9IGZpbGVDYWNoZT8udGFncz8ubWFwKHRhZ0NhY2hlID0+IHRhZ0NhY2hlLnRhZykgfHwgW107XG5cdFx0bGV0IGZtdGFncyA9IGZpbGVDYWNoZT8uZnJvbnRtYXR0ZXI/LnRhZ3M/Lm1hcCgodCA6c3RyaW5nKSA9PiBgIyR7dH1gKTtcblx0XHR0YWdzLnB1c2goLi4uZm10YWdzIHx8IFtdKTtcblxuXHRcdGlmICh0YWdzLmluY2x1ZGVzKFwiI2luYm94XCIpXG5cdFx0XHQmJiBmaWxlLnBhdGguc2VhcmNoKFwiVGVtcGxhdGVzXCIpID09IC0xKSB7XG5cdFx0XHRpbmJveEZpbGVzLnB1c2goZmlsZSk7XG5cdFx0fVxuXHR9XG5cblx0aW5ib3hGaWxlcy5zb3J0KCgoYSwgYikgPT4gYi5zdGF0LmN0aW1lIC0gYS5zdGF0LmN0aW1lKSk7XG5cblx0aWYgKGluYm94RmlsZXMubGVuZ3RoID09IDApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdGlmIChhY3RpdmVGaWxlICE9PSBudWxsKSB7XG5cdFx0aW5kZXggPSBpbmJveEZpbGVzLmZpbmRJbmRleChvYmogPT4gb2JqID09IGFjdGl2ZUZpbGUpOyAvLyBXZSB3YW50IHRoZSBuZXh0IGZpbGUuXG5cdFx0aWYgKGluZGV4IDwgMCkge1xuXHRcdFx0aW5kZXggPSAtMTtcblx0XHR9XG5cdFx0aW5kZXggPSAoaW5kZXggKyAxKSAlIGluYm94RmlsZXMubGVuZ3RoO1xuXHR9XG5cblx0YXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQoaW5ib3hGaWxlc1tpbmRleF0uYmFzZW5hbWUsICcnLCBmYWxzZSwge1xuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0fSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gdW5pcXVlX25vdGUoYXBwOiBBcHApIHtcblx0bGV0IG5hbWUgPSBNYXRoLnRydW5jKG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDMpO1xuXG5cdGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbmQoXG5cdFx0ZiA9PiBmLmJhc2VuYW1lID09IFVOSVFVRV9OT1RFX1RFTVBMQVRFKTtcblxuXHRpZiAoZmlsZSA9PSBudWxsKSB7XG5cdFx0Y29uc29sZS5sb2coXCJDYW4ndCBmaW5kOiBcIiwgVU5JUVVFX05PVEVfVEVNUExBVEUpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0bGV0IGNvbnRlbnRzID0gYXdhaXQgYXBwLnZhdWx0LmNhY2hlZFJlYWQoZmlsZSk7XG5cdGxldCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG5cdGNvbnRlbnRzID0gY29udGVudHMucmVwbGFjZSgve3tkYXRlfX0vZywgY3VycmVudERhdGUpO1xuXG5cdGxldCBuZXdGaWxlID0gYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZShgJHtuYW1lfS5tZGAsIGNvbnRlbnRzKTtcblx0YXdhaXQgYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQobmV3RmlsZS5iYXNlbmFtZSwgXCJcIiwgZmFsc2UsIHtcblx0XHRhY3RpdmU6IHRydWUsXG5cdH0pO1xuXG5cblx0Y29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdGlmICh2aWV3ID09IG51bGwpIHtcblx0XHRyZXR1cm5cblx0fVxuXHRjb25zb2xlLmxvZyhcImhlcmVcIik7XG5cdHZpZXcuZWRpdG9yLmZvY3VzKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV0aGFuVXRpbCBleHRlbmRzIFBsdWdpbiB7XG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdldGhhbjppbmJveC1uZXh0Jyxcblx0XHRcdG5hbWU6ICdOZXh0IEluYm94Jyxcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdG9wZW5faW5ib3hfbm90ZSh0aGlzLmFwcCk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZXRoYW46ZGVsZXRlLWluYm94LW5leHQnLFxuXHRcdFx0bmFtZTogJ0RlbGV0ZSBhbmQgTmV4dCBJbmJveCcsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRsZXQgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdG9wZW5faW5ib3hfbm90ZSh0aGlzLmFwcCk7XG5cdFx0XHRcdGlmIChmaWxlICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5hcHAudmF1bHQudHJhc2goZmlsZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdldGhhbjp1bmlxdWUtbm90ZScsXG5cdFx0XHRuYW1lOiAnVW5pcXVlIE5vdGUnLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0dW5pcXVlX25vdGUodGhpcy5hcHApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZXRoYW46dW5pcXVlLXRhc2snLFxuXHRcdFx0bmFtZTogJ1VuaXF1ZSBUYXNrJyxcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGF3YWl0IHVuaXF1ZV9ub3RlKHRoaXMuYXBwKTtcblx0XHRcdFx0KHRoaXMuYXBwIGFzIGFueSkuY29tbWFuZHMuXG5cdFx0XHRcdFx0ZXhlY3V0ZUNvbW1hbmRCeUlkKFwib2JzaWRpYW4tdGFza3MtcGx1Z2luOmVkaXQtdGFza1wiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdG9udW5sb2FkKCkge31cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBeUM7QUFFekMsSUFBTSx1QkFBdUI7QUFFN0IsU0FBUyxnQkFBZ0IsS0FBVTtBQUpuQztBQU1DLFFBQU0sUUFBUSxJQUFJLE1BQU0saUJBQWlCO0FBRXpDLE1BQUksYUFBYSxDQUFDO0FBQ2xCLGFBQVcsUUFBUSxPQUFPO0FBQ3pCLFFBQUksWUFBWSxJQUFJLGNBQWMsYUFBYSxJQUFJO0FBQ25ELFFBQUksU0FBTyw0Q0FBVyxTQUFYLG1CQUFpQixJQUFJLGNBQVksU0FBUyxTQUFRLENBQUM7QUFDOUQsUUFBSSxVQUFTLGtEQUFXLGdCQUFYLG1CQUF3QixTQUF4QixtQkFBOEIsSUFBSSxDQUFDLE1BQWMsSUFBSTtBQUNsRSxTQUFLLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQztBQUV6QixRQUFJLEtBQUssU0FBUyxRQUFRLEtBQ3RCLEtBQUssS0FBSyxPQUFPLFdBQVcsS0FBSyxJQUFJO0FBQ3hDLGlCQUFXLEtBQUssSUFBSTtBQUFBLElBQ3JC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

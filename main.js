/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UNIQUE_NOTE_TEMPLATE = "Unique Note Inbox Template";
function open_inbox_note(app) {
  var _a, _b;
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    let fileCache = app.metadataCache.getFileCache(file);
    let tags = ((_a = fileCache == null ? void 0 : fileCache.tags) == null ? void 0 : _a.map((tagCache) => tagCache.tag)) || [];
    let tags_array = (_b = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b.tags;
    if (Array.isArray(tags_array)) {
      tags.push(...tags_array.map((t) => `#${t}`) || []);
    }
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  inboxFiles.sort((a, b) => b.stat.ctime - a.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = 0;
  let activeFile = this.app.workspace.getActiveFile();
  if (activeFile !== null) {
    index = inboxFiles.findIndex((obj) => obj == activeFile);
    if (index < 0) {
      index = -1;
    }
    index = (index + 1) % inboxFiles.length;
  }
  app.workspace.openLinkText(inboxFiles[index].basename, "", false, {
    active: true
  });
}
async function unique_note(app) {
  let currentDate = new Date().toISOString().slice(0, 10);
  let stamp = Math.random().toString(36).substring(9).toUpperCase();
  let name = `${currentDate} ${stamp}.md`;
  const file = app.vault.getMarkdownFiles().find(
    (f) => f.basename == UNIQUE_NOTE_TEMPLATE
  );
  if (file == null) {
    console.log("Can't find: ", UNIQUE_NOTE_TEMPLATE);
    return null;
  }
  let contents = await app.vault.cachedRead(file);
  contents = contents.replace(/{{date}}/g, currentDate);
  let newFile = await app.vault.create(name, contents);
  await app.workspace.openLinkText(newFile.basename, "", false, {
    active: true
  });
  const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (view == null) {
    return;
  }
  console.log("here");
  view.editor.focus();
}
async function copy_markdown(app) {
  let file = app.workspace.getActiveFile();
  if (file == null) {
    return;
  }
  let contents = await app.vault.cachedRead(file);
  contents = contents.replace(/^---[\s\S]*?---/, "");
  contents = contents.replace(/^[\s\S]*%%\s*?\-\-\-\s*?%%/, "");
  contents = contents.replace(/\[\[(.*?)\|(.*?)\]\]/g, "$2");
  contents = contents.replace(/\[\[(.*?)\]\]/g, "$1");
  contents = contents.replace(/%%[\s\S]*?%%/g, "");
  contents = contents.replace(/^\s*/, "");
  contents = contents.replace(/\s*$/, "");
  await navigator.clipboard.writeText(contents);
  new import_obsidian.Notice(contents);
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    const inbox_next_cb = () => {
      open_inbox_note(this.app);
    };
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next Inbox",
      callback: inbox_next_cb
    });
    this.addRibbonIcon("mails", "Next Inbox", inbox_next_cb);
    const delete_inbox_cb = () => {
      let file = this.app.workspace.getActiveFile();
      open_inbox_note(this.app);
      if (file !== null) {
        this.app.vault.trash(file, false);
      }
    };
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete",
      callback: delete_inbox_cb
    });
    this.addRibbonIcon("trash", "Delete, Open Inbox", delete_inbox_cb);
    const new_note_cb = () => {
      unique_note(this.app);
    };
    this.addCommand({
      id: "ethan:unique-note",
      name: "New Note",
      callback: new_note_cb
    });
    this.addRibbonIcon("file-plus-2", "Create Unique note", new_note_cb);
    const copy_markdown_cb = () => {
      copy_markdown(this.app);
    };
    this.addCommand({
      id: "ethan:copy-markdown",
      name: "Copy Markdown",
      callback: copy_markdown_cb
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBBcHAsIE1hcmtkb3duVmlldywgTm90aWNlfSBmcm9tICdvYnNpZGlhbic7XG5cbmNvbnN0IFVOSVFVRV9OT1RFX1RFTVBMQVRFID0gXCJVbmlxdWUgTm90ZSBJbmJveCBUZW1wbGF0ZVwiO1xuXG5mdW5jdGlvbiBvcGVuX2luYm94X25vdGUoYXBwOiBBcHApIHtcblx0Ly8gY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcblxuXHRsZXQgaW5ib3hGaWxlcyA9IFtdO1xuXHRmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcblx0XHRsZXQgZmlsZUNhY2hlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXHRcdGxldCB0YWdzID0gZmlsZUNhY2hlPy50YWdzPy5tYXAodGFnQ2FjaGUgPT4gdGFnQ2FjaGUudGFnKSB8fCBbXTtcblx0XHRsZXQgdGFnc19hcnJheSA9IGZpbGVDYWNoZT8uZnJvbnRtYXR0ZXI/LnRhZ3M7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodGFnc19hcnJheSkpIHtcblx0XHRcdHRhZ3MucHVzaCguLi50YWdzX2FycmF5Lm1hcCgodCA6c3RyaW5nKSA9PiBgIyR7dH1gKSB8fCBbXSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRhZ3MuaW5jbHVkZXMoXCIjaW5ib3hcIilcblx0XHRcdCYmIGZpbGUucGF0aC5zZWFyY2goXCJUZW1wbGF0ZXNcIikgPT0gLTEpIHtcblx0XHRcdGluYm94RmlsZXMucHVzaChmaWxlKTtcblx0XHR9XG5cdH1cblxuXHRpbmJveEZpbGVzLnNvcnQoKChhLCBiKSA9PiBiLnN0YXQuY3RpbWUgLSBhLnN0YXQuY3RpbWUpKTtcblxuXHRpZiAoaW5ib3hGaWxlcy5sZW5ndGggPT0gMCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0aWYgKGFjdGl2ZUZpbGUgIT09IG51bGwpIHtcblx0XHRpbmRleCA9IGluYm94RmlsZXMuZmluZEluZGV4KG9iaiA9PiBvYmogPT0gYWN0aXZlRmlsZSk7IC8vIFdlIHdhbnQgdGhlIG5leHQgZmlsZS5cblx0XHRpZiAoaW5kZXggPCAwKSB7XG5cdFx0XHRpbmRleCA9IC0xO1xuXHRcdH1cblx0XHRpbmRleCA9IChpbmRleCArIDEpICUgaW5ib3hGaWxlcy5sZW5ndGg7XG5cdH1cblxuXHRhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChpbmJveEZpbGVzW2luZGV4XS5iYXNlbmFtZSwgJycsIGZhbHNlLCB7XG5cdFx0YWN0aXZlOiB0cnVlLFxuXHR9KVxufVxuXG5hc3luYyBmdW5jdGlvbiB1bmlxdWVfbm90ZShhcHA6IEFwcCkge1xuXHRsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRsZXQgc3RhbXAgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoOSkudG9VcHBlckNhc2UoKTtcblx0bGV0IG5hbWUgPSBgJHtjdXJyZW50RGF0ZX0gJHtzdGFtcH0ubWRgO1xuXG5cdGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbmQoXG5cdFx0ZiA9PiBmLmJhc2VuYW1lID09IFVOSVFVRV9OT1RFX1RFTVBMQVRFKTtcblxuXHRpZiAoZmlsZSA9PSBudWxsKSB7XG5cdFx0Y29uc29sZS5sb2coXCJDYW4ndCBmaW5kOiBcIiwgVU5JUVVFX05PVEVfVEVNUExBVEUpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0bGV0IGNvbnRlbnRzID0gYXdhaXQgYXBwLnZhdWx0LmNhY2hlZFJlYWQoZmlsZSk7XG5cdGNvbnRlbnRzID0gY29udGVudHMucmVwbGFjZSgve3tkYXRlfX0vZywgY3VycmVudERhdGUpO1xuXG5cdGxldCBuZXdGaWxlID0gYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZShuYW1lLCBjb250ZW50cyk7XG5cdGF3YWl0IGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KG5ld0ZpbGUuYmFzZW5hbWUsIFwiXCIsIGZhbHNlLCB7XG5cdFx0YWN0aXZlOiB0cnVlLFxuXHR9KTtcblxuXHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0aWYgKHZpZXcgPT0gbnVsbCkge1xuXHRcdHJldHVyblxuXHR9XG5cdGNvbnNvbGUubG9nKFwiaGVyZVwiKTtcblx0dmlldy5lZGl0b3IuZm9jdXMoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY29weV9tYXJrZG93bihhcHA6IEFwcCkge1xuXHRsZXQgZmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRpZiAoZmlsZSA9PSBudWxsKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0bGV0IGNvbnRlbnRzID0gYXdhaXQgYXBwLnZhdWx0LmNhY2hlZFJlYWQoZmlsZSk7XG5cdGNvbnRlbnRzID0gY29udGVudHMucmVwbGFjZSgvXi0tLVtcXHNcXFNdKj8tLS0vLCBcIlwiKTtcblx0Y29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKC9eW1xcc1xcU10qJSVcXHMqP1xcLVxcLVxcLVxccyo/JSUvLCBcIlwiKTtcblx0Y29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKC9cXFtcXFsoLio/KVxcfCguKj8pXFxdXFxdL2csIFwiJDJcIik7XG5cdGNvbnRlbnRzID0gY29udGVudHMucmVwbGFjZSgvXFxbXFxbKC4qPylcXF1cXF0vZywgXCIkMVwiKTtcblx0Y29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKC8lJVtcXHNcXFNdKj8lJS9nLCBcIlwiKTtcblx0Y29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKC9eXFxzKi8sIFwiXCIpO1xuXHRjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL1xccyokLywgXCJcIik7XG5cblx0YXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY29udGVudHMpO1xuXHRuZXcgTm90aWNlKGNvbnRlbnRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXRoYW5VdGlsIGV4dGVuZHMgUGx1Z2luIHtcblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdC8vIEluYm94IE5leHRcblx0XHRjb25zdCBpbmJveF9uZXh0X2NiID0gICgpID0+IHtcblx0XHRcdG9wZW5faW5ib3hfbm90ZSh0aGlzLmFwcCk7XG5cdFx0fTtcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2V0aGFuOmluYm94LW5leHQnLFxuXHRcdFx0bmFtZTogJ05leHQgSW5ib3gnLFxuXHRcdFx0Y2FsbGJhY2s6IGluYm94X25leHRfY2IsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGRSaWJib25JY29uKFwibWFpbHNcIiwgXCJOZXh0IEluYm94XCIsIGluYm94X25leHRfY2IpO1xuXG5cblx0XHQvLyBEZWxldGUgYW5kIEluYm94IE5leHRcblx0XHRjb25zdCBkZWxldGVfaW5ib3hfY2IgPSAoKSA9PiB7XG5cdFx0XHRsZXQgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRvcGVuX2luYm94X25vdGUodGhpcy5hcHApO1xuXHRcdFx0aWYgKGZpbGUgIT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5hcHAudmF1bHQudHJhc2goZmlsZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2V0aGFuOmRlbGV0ZS1pbmJveC1uZXh0Jyxcblx0XHRcdG5hbWU6ICdEZWxldGUnLFxuXHRcdFx0Y2FsbGJhY2s6IGRlbGV0ZV9pbmJveF9jYixcblx0XHR9KTtcblx0XHR0aGlzLmFkZFJpYmJvbkljb24oXCJ0cmFzaFwiLCBcIkRlbGV0ZSwgT3BlbiBJbmJveFwiLCBkZWxldGVfaW5ib3hfY2IpO1xuXG5cblx0XHQvLyBVbmlxdWUgTm90ZVxuXHRcdGNvbnN0IG5ld19ub3RlX2NiID0gKCkgPT4ge1xuXHRcdFx0dW5pcXVlX25vdGUodGhpcy5hcHApO1xuXHRcdH1cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdldGhhbjp1bmlxdWUtbm90ZScsXG5cdFx0XHRuYW1lOiAnTmV3IE5vdGUnLFxuXHRcdFx0Y2FsbGJhY2s6IG5ld19ub3RlX2NiLFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRSaWJib25JY29uKFwiZmlsZS1wbHVzLTJcIiwgXCJDcmVhdGUgVW5pcXVlIG5vdGVcIiwgbmV3X25vdGVfY2IpO1xuXG5cdFx0Ly8gQ29weSBNYXJrZG93blxuXHRcdGNvbnN0IGNvcHlfbWFya2Rvd25fY2IgPSAoKSA9PiB7XG5cdFx0XHRjb3B5X21hcmtkb3duKHRoaXMuYXBwKTtcblx0XHR9XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZXRoYW46Y29weS1tYXJrZG93bicsXG5cdFx0XHRuYW1lOiAnQ29weSBNYXJrZG93bicsXG5cdFx0XHRjYWxsYmFjazogY29weV9tYXJrZG93bl9jYixcblx0XHR9KTtcblx0fVxuXG5cdG9udW5sb2FkKCkge31cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBaUQ7QUFFakQsSUFBTSx1QkFBdUI7QUFFN0IsU0FBUyxnQkFBZ0IsS0FBVTtBQUpuQztBQU1DLFFBQU0sUUFBUSxJQUFJLE1BQU0saUJBQWlCO0FBRXpDLE1BQUksYUFBYSxDQUFDO0FBQ2xCLGFBQVcsUUFBUSxPQUFPO0FBQ3pCLFFBQUksWUFBWSxJQUFJLGNBQWMsYUFBYSxJQUFJO0FBQ25ELFFBQUksU0FBTyw0Q0FBVyxTQUFYLG1CQUFpQixJQUFJLGNB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

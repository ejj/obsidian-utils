/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var BASIC_TEMPLATE = "Basic Template";
var INBOX_PATH = "Inbox";
var TASKS_PATH = "Tasks.md";
function currentDate() {
  return new Date().toISOString().slice(0, 10);
}
var EthanUtil = class extends import_obsidian.Plugin {
  async unique_note_contents() {
    const file = this.app.vault.getMarkdownFiles().find(
      (f) => f.basename == BASIC_TEMPLATE
    );
    if (file == null) {
      throw new Error("Can't find: " + BASIC_TEMPLATE);
    }
    let contents = await this.app.vault.cachedRead(file);
    contents = contents.replace(/{{date}}/g, currentDate());
    return contents;
  }
  async on_create(file) {
    const new_contents = await this.unique_note_contents();
    await new Promise((resolve) => setTimeout(resolve, 10));
    const old_content = await this.app.vault.read(file);
    if (/^---/.test(old_content)) {
      return;
    }
    this.app.vault.modify(file, new_contents + old_content);
  }
  async create_task() {
    const plugin = this.app.plugins.plugins["obsidian-tasks-plugin"];
    const task = await plugin.apiV1.createTaskLineModal();
    const file = this.app.vault.getAbstractFileByPath(TASKS_PATH);
    if (file instanceof import_obsidian.TFile) {
      this.app.vault.append(file, "\n" + task);
    } else {
      console.log("failed to find file for create_task");
    }
  }
  async append_task() {
    var _a;
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
    if (editor == null) {
      return;
    }
    const cursor = editor.getCursor();
    const lineContent = editor.getLine(cursor.line);
    editor.replaceRange(
      "",
      { line: cursor.line, ch: 0 },
      { line: cursor.line + 1, ch: 0 }
    );
    const file = this.app.vault.getAbstractFileByPath(TASKS_PATH);
    if (file instanceof import_obsidian.TFile) {
      await this.app.vault.append(file, "\n" + lineContent);
    }
  }
  toggle_inbox() {
    let file = this.app.workspace.getActiveFile();
    if (file == null) {
      return;
    }
    this.app.fileManager.processFrontMatter(file, (fm) => {
      let tags = (0, import_obsidian.parseFrontMatterTags)(fm);
      if (tags == null) {
        tags = ["#inbox"];
      } else if (!tags.includes("#inbox")) {
        tags.push("#inbox");
      } else {
        tags = tags.filter((x) => x !== "#inbox");
      }
      fm.tags = tags;
      return fm;
    });
  }
  async copy_markdown() {
    let file = this.app.workspace.getActiveFile();
    if (file == null) {
      return;
    }
    let contents = await this.app.vault.cachedRead(file);
    contents = contents.replace(/^---[\s\S]*?---/, "");
    contents = contents.replace(/^[\s\S]*%%\s*?\-\-\-\s*?%%/, "");
    contents = contents.replace(/\[\[(.*?)\|(.*?)\]\]/g, "$2");
    contents = contents.replace(/\[\[(.*?)\]\]/g, "$1");
    contents = contents.replace(/%%[\s\S]*?%%/g, "");
    contents = contents.replace(/^\s*/, "");
    contents = contents.replace(/\s*$/, "");
    await navigator.clipboard.writeText(contents);
    new import_obsidian.Notice(contents);
  }
  open_inbox_note() {
    const files = this.app.vault.getMarkdownFiles();
    let inboxFiles = [];
    for (const file of files) {
      const mc = this.app.metadataCache.getFileCache(file);
      if (mc == null) {
        continue;
      }
      let tags = (0, import_obsidian.getAllTags)(mc);
      if (tags == null) {
        continue;
      }
      if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
        inboxFiles.push(file);
      }
    }
    let folder = this.app.vault.getAbstractFileByPath(INBOX_PATH);
    if (folder instanceof import_obsidian.TFolder) {
      console.log("here 1");
      for (const f of folder.children) {
        if (f instanceof import_obsidian.TFile) {
          inboxFiles.push(f);
        }
      }
    } else {
      console.log("here");
    }
    inboxFiles.sort((a, b) => {
      const aIsMarkdown = a.extension === "md";
      const bIsMarkdown = b.extension === "md";
      if (aIsMarkdown && !bIsMarkdown)
        return -1;
      if (!aIsMarkdown && bIsMarkdown)
        return 1;
      return b.stat.ctime - a.stat.ctime;
    });
    if (inboxFiles.length == 0) {
      return;
    }
    let index = 0;
    let activeFile = this.app.workspace.getActiveFile();
    if (activeFile !== null) {
      index = inboxFiles.findIndex((obj) => obj == activeFile);
      if (index < 0) {
        index = -1;
      }
      index = (index + 1) % inboxFiles.length;
    }
    this.app.workspace.getLeaf().openFile(inboxFiles[index]);
  }
  async unique_note() {
    const file = this.app.vault.getMarkdownFiles().find(
      (f) => f.basename == BASIC_TEMPLATE
    );
    if (file == null) {
      console.log("Can't find: ", BASIC_TEMPLATE);
      return null;
    }
    let stamp = Math.random().toString(36).substring(9).toUpperCase();
    let name = `${currentDate()} ${stamp}.md`;
    let contents = await this.unique_note_contents();
    let newFile = await this.app.vault.create(name, contents);
    await this.app.workspace.getLeaf().openFile(newFile);
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view == null) {
      return;
    }
    view.editor.focus();
  }
  delete_inbox() {
    let file = this.app.workspace.getActiveFile();
    this.open_inbox_note();
    if (file !== null) {
      this.app.vault.trash(file, false);
    }
  }
  async onload() {
    const inbox_next_cb = () => this.open_inbox_note();
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next inbox",
      callback: inbox_next_cb
    });
    this.addRibbonIcon("mails", "Next", inbox_next_cb);
    const new_note_cb = () => this.unique_note();
    this.addCommand({
      id: "ethan:unique-note",
      name: "New note",
      callback: new_note_cb
    });
    this.addRibbonIcon("file-plus-2", "Create", new_note_cb);
    const delete_inbox_cb = () => this.delete_inbox();
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete",
      callback: delete_inbox_cb
    });
    this.addRibbonIcon("trash", "Delete", delete_inbox_cb);
    const copy_markdown_cb = () => this.copy_markdown();
    this.addCommand({
      id: "ethan:copy-markdown",
      name: "Copy markdown",
      callback: copy_markdown_cb
    });
    this.addRibbonIcon("clipboard-copy", "Copy", copy_markdown_cb);
    this.addCommand({
      id: "ethan:toggle-inbox",
      name: "Toggle inbox",
      callback: () => this.toggle_inbox()
    });
    this.addCommand({
      id: "ethan:append-task",
      name: "Append Task",
      callback: () => this.append_task()
    });
    this.addCommand({
      id: "ethan:create-task",
      name: "Create Task",
      callback: () => this.create_task()
    });
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(this.app.vault.on("create", this.on_create, this));
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,

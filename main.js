/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EthanUtil
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UNIQUE_NOTE_TEMPLATE = "Unique Note Inbox Template";
function open_inbox_note(app) {
  var _a, _b, _c;
  const files = app.vault.getMarkdownFiles();
  let inboxFiles = [];
  for (const file of files) {
    let fileCache = app.metadataCache.getFileCache(file);
    let tags = ((_a = fileCache == null ? void 0 : fileCache.tags) == null ? void 0 : _a.map((tagCache) => tagCache.tag)) || [];
    let fmtags = (_c = (_b = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b.tags) == null ? void 0 : _c.map((t) => `#${t}`);
    tags.push(...fmtags || []);
    if (tags.includes("#inbox") && file.path.search("Templates") == -1) {
      inboxFiles.push(file);
    }
  }
  inboxFiles.sort((a, b) => b.stat.ctime - a.stat.ctime);
  if (inboxFiles.length == 0) {
    return;
  }
  let index = 0;
  let activeFile = this.app.workspace.getActiveFile();
  if (activeFile !== null) {
    index = inboxFiles.findIndex((obj) => obj == activeFile);
    if (index < 0) {
      index = -1;
    }
    index = (index + 1) % inboxFiles.length;
  }
  app.workspace.openLinkText(inboxFiles[index].basename, "", false, {
    active: true
  });
}
async function unique_note(app) {
  let name = Math.trunc(new Date().getTime() / 1e3).toString().substring(3);
  const file = app.vault.getMarkdownFiles().find(
    (f) => f.basename == UNIQUE_NOTE_TEMPLATE
  );
  if (file == null) {
    console.log("Can't find: ", UNIQUE_NOTE_TEMPLATE);
    return null;
  }
  let contents = await app.vault.cachedRead(file);
  let currentDate = new Date().toISOString().slice(0, 10);
  contents = contents.replace(/{{date}}/g, currentDate);
  let newFile = await app.vault.create(`${name}.md`, contents);
  await app.workspace.openLinkText(newFile.basename, "", false, {
    active: true
  });
}
var EthanUtil = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "ethan:inbox-next",
      name: "Next Inbox Note",
      callback: () => {
        open_inbox_note(this.app);
      }
    });
    this.addCommand({
      id: "ethan:delete-inbox-next",
      name: "Delete and Next Inbox Note",
      callback: () => {
        let file = this.app.workspace.getActiveFile();
        open_inbox_note(this.app);
        if (file !== null) {
          this.app.vault.trash(file, false);
        }
      }
    });
    this.addCommand({
      id: "ethan:unique-note",
      name: "Ethan Unique Note",
      callback: () => {
        unique_note(this.app);
      }
    });
    this.addCommand({
      id: "ethan:unique-task",
      name: "Ethan Unique Task",
      callback: async () => {
        await unique_note(this.app);
        this.app.commands.executeCommandById("obsidian-tasks-plugin:edit-task");
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBBcHB9IGZyb20gJ29ic2lkaWFuJztcblxuY29uc3QgVU5JUVVFX05PVEVfVEVNUExBVEUgPSBcIlVuaXF1ZSBOb3RlIEluYm94IFRlbXBsYXRlXCI7XG5cbmZ1bmN0aW9uIG9wZW5faW5ib3hfbm90ZShhcHA6IEFwcCkge1xuXHQvLyBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcblx0Y29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXG5cdGxldCBpbmJveEZpbGVzID0gW107XG5cdGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuXHRcdGxldCBmaWxlQ2FjaGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG5cdFx0bGV0IHRhZ3MgPSBmaWxlQ2FjaGU/LnRhZ3M/Lm1hcCh0YWdDYWNoZSA9PiB0YWdDYWNoZS50YWcpIHx8IFtdO1xuXHRcdGxldCBmbXRhZ3MgPSBmaWxlQ2FjaGU/LmZyb250bWF0dGVyPy50YWdzPy5tYXAoKHQgOnN0cmluZykgPT4gYCMke3R9YCk7XG5cdFx0dGFncy5wdXNoKC4uLmZtdGFncyB8fCBbXSk7XG5cblx0XHRpZiAodGFncy5pbmNsdWRlcyhcIiNpbmJveFwiKVxuXHRcdFx0JiYgZmlsZS5wYXRoLnNlYXJjaChcIlRlbXBsYXRlc1wiKSA9PSAtMSkge1xuXHRcdFx0aW5ib3hGaWxlcy5wdXNoKGZpbGUpO1xuXHRcdH1cblx0fVxuXG5cdGluYm94RmlsZXMuc29ydCgoKGEsIGIpID0+IGIuc3RhdC5jdGltZSAtIGEuc3RhdC5jdGltZSkpO1xuXG5cdGlmIChpbmJveEZpbGVzLmxlbmd0aCA9PSAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRpZiAoYWN0aXZlRmlsZSAhPT0gbnVsbCkge1xuXHRcdGluZGV4ID0gaW5ib3hGaWxlcy5maW5kSW5kZXgob2JqID0+IG9iaiA9PSBhY3RpdmVGaWxlKTsgLy8gV2Ugd2FudCB0aGUgbmV4dCBmaWxlLlxuXHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdGluZGV4ID0gLTE7XG5cdFx0fVxuXHRcdGluZGV4ID0gKGluZGV4ICsgMSkgJSBpbmJveEZpbGVzLmxlbmd0aDtcblx0fVxuXG5cdGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KGluYm94RmlsZXNbaW5kZXhdLmJhc2VuYW1lLCAnJywgZmFsc2UsIHtcblx0XHRhY3RpdmU6IHRydWUsXG5cdH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVuaXF1ZV9ub3RlKGFwcDogQXBwKSB7XG5cdGxldCBuYW1lID0gTWF0aC50cnVuYyhuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKS50b1N0cmluZygpLnN1YnN0cmluZygzKTtcblxuXHRjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5maW5kKFxuXHRcdGYgPT4gZi5iYXNlbmFtZSA9PSBVTklRVUVfTk9URV9URU1QTEFURSk7XG5cblx0aWYgKGZpbGUgPT0gbnVsbCkge1xuXHRcdGNvbnNvbGUubG9nKFwiQ2FuJ3QgZmluZDogXCIsIFVOSVFVRV9OT1RFX1RFTVBMQVRFKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGxldCBjb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuXHRsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UoL3t7ZGF0ZX19L2csIGN1cnJlbnREYXRlKTtcblxuXHRsZXQgbmV3RmlsZSA9IGF3YWl0IGFwcC52YXVsdC5jcmVhdGUoYCR7bmFtZX0ubWRgLCBjb250ZW50cyk7XG5cdGF3YWl0IGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KG5ld0ZpbGUuYmFzZW5hbWUsIFwiXCIsIGZhbHNlLCB7XG5cdFx0YWN0aXZlOiB0cnVlLFxuXHR9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXRoYW5VdGlsIGV4dGVuZHMgUGx1Z2luIHtcblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2V0aGFuOmluYm94LW5leHQnLFxuXHRcdFx0bmFtZTogJ05leHQgSW5ib3ggTm90ZScsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRvcGVuX2luYm94X25vdGUodGhpcy5hcHApO1xuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2V0aGFuOmRlbGV0ZS1pbmJveC1uZXh0Jyxcblx0XHRcdG5hbWU6ICdEZWxldGUgYW5kIE5leHQgSW5ib3ggTm90ZScsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRsZXQgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdG9wZW5faW5ib3hfbm90ZSh0aGlzLmFwcCk7XG5cdFx0XHRcdGlmIChmaWxlICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5hcHAudmF1bHQudHJhc2goZmlsZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdldGhhbjp1bmlxdWUtbm90ZScsXG5cdFx0XHRuYW1lOiAnRXRoYW4gVW5pcXVlIE5vdGUnLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0dW5pcXVlX25vdGUodGhpcy5hcHApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZXRoYW46dW5pcXVlLXRhc2snLFxuXHRcdFx0bmFtZTogJ0V0aGFuIFVuaXF1ZSBUYXNrJyxcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGF3YWl0IHVuaXF1ZV9ub3RlKHRoaXMuYXBwKTtcblx0XHRcdFx0KHRoaXMuYXBwIGFzIGFueSkuY29tbWFuZHMuXG5cdFx0XHRcdFx0ZXhlY3V0ZUNvbW1hbmRCeUlkKFwib2JzaWRpYW4tdGFza3MtcGx1Z2luOmVkaXQtdGFza1wiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdG9udW5sb2FkKCkge31cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBMkI7QUFFM0IsSUFBTSx1QkFBdUI7QUFFN0IsU0FBUyxnQkFBZ0IsS0FBVTtBQUpuQztBQU1DLFFBQU0sUUFBUSxJQUFJLE1BQU0saUJBQWlCO0FBRXpDLE1BQUksYUFBYSxDQUFDO0FBQ2xCLGFBQVcsUUFBUSxPQUFPO0FBQ3pCLFFBQUksWUFBWSxJQUFJLGNBQWMsYUFBYSxJQUFJO0FBQ25ELFFBQUksU0FBTyw0Q0FBVyxTQUFYLG1CQUFpQixJQUFJLGNBQVksU0FBUyxTQUFRLENBQUM7QUFDOUQsUUFBSSxVQUFTLGtEQUFXLGdCQUFYLG1CQUF3QixTQUF4QixtQkFBOEIsSUFBSSxDQUFDLE1BQWMsSUFBSTtBQUNsRSxTQUFLLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQztBQUV6QixRQUFJLEtBQUssU0FBUyxRQUFRLEtBQ3RCLEtBQUssS0FBSyxPQUFPLFdBQVcsS0FBSyxJQUFJO0FBQ3hDLGlCQUFXLEtBQUssSUFBSTtBQUFBLElBQ3JCO0FBQUEsRUFDRDtBQUVBLGFBQVcsS0FBTSxDQUFDLEdBQUcsTUFBTSxFQUFFLEtBQUssUUFBUSxFQUFFLEtBQUssS0FBTTtBQUV2RCxNQUFJLFdBQVcsVUFBVSxHQUFHO0FBQzNCO0FBQUEsRUFDRDtBQUVBLE1BQUksUUFBUTtBQUNaLE1BQUksYUFBYSxLQUFLLElBQUksVUFBVSxjQUFjO0FBQ2xELE1BQUksZUFBZSxNQUFNO0FBQ3hCLFlBQVEsV0FBVyxVQUFVLFNBQU8sT0FBTyxVQUFVO0FBQ3JELFFBQUksUUFBUSxHQUFHO0FBQ2QsY0FBUTtBQUFBLElBQ1Q7QUFDQSxhQUFTLFFBQVEsS0FBSyxXQUFXO0FBQUEsRUFDbEM7QUFFQSxNQUFJLFVBQVUsYUFBYSxXQUFXLEtBQUssRUFBRSxVQUFVLElBQUksT0FBTztBQUFBLElBQ2pFLFFBQVE7QUFBQSxFQUNULENBQUM7QUFDRjtBQUVBLGVBQWUsWUFBWSxLQUFVO0FBQ3BDLE1BQUksT0FBTyxLQUFLLE1BQU0sSUFBSSxLQUFLLEVBQUUsUUFBUSxJQUFFLEdBQUksRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDO0FBRXZFLFFBQU0sT0FBTyxJQUFJLE1BQU0saUJBQWlCLEVBQUU7QUFBQSxJQUN6QyxPQUFLLEVBQUUsWUFBWTtBQUFBLEVBQW9CO0FBRXhDLE1BQUksUUFBUSxNQUFNO0FBQ2pCLFlBQVEsSUFBSSxnQkFBZ0Isb0JBQW9CO0FBQ2hELFdBQU87QUFBQSxFQUNSO0FBRUEsTUFBSSxXQUFXLE1BQU0sSUFBSSxNQUFNLFdBQVcsSUFBSTtBQUM5QyxNQUFJLGNBQWMsSUFBSSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxFQUFFO0FBQ3RELGFBQVcsU0FBUyxRQUFRLGFBQWEsV0FBVztBQUVwRCxNQUFJLFVBQVUsTUFBTSxJQUFJLE1BQU0sT0FBTyxHQUFHLFdBQVcsUUFBUTtBQUMzRCxRQUFNLElBQUksVUFBVSxhQUFhLFFBQVEsVUFBVSxJQUFJLE9BQU87QUFBQSxJQUM3RCxRQUFRO0FBQUEsRUFDVCxDQUFDO0FBQ0Y7QUFFQSxJQUFxQixZQUFyQixjQUF1Qyx1QkFBTztBQUFBLEVBQzdDLE1BQU0sU0FBUztBQUNkLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ2Ysd0JBQWdCLEtBQUssR0FBRztBQUFBLE1BQ3pCO0FBQUEsSUFDRCxDQUFDO0FBRUQsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDZixZQUFJLE9BQU8sS0FBSyxJQUFJLFVBQVUsY0FBYztBQUM1Qyx3QkFBZ0IsS0FBSyxHQUFHO0FBQ3hCLFlBQUksU0FBUyxNQUFNO0FBQ2xCLGVBQUssSUFBSSxNQUFNLE1BQU0sTUFBTSxLQUFLO0FBQUEsUUFDakM7QUFBQSxNQUNEO0FBQUEsSUFDRCxDQUFDO0FBRUQsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDZixvQkFBWSxLQUFLLEdBQUc7QUFBQSxNQUNyQjtBQUFBLElBQ0QsQ0FBQztBQUVELFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxZQUFZO0FBQ3JCLGNBQU0sWUFBWSxLQUFLLEdBQUc7QUFDMUIsUUFBQyxLQUFLLElBQVksU0FDakIsbUJBQW1CLGlDQUFpQztBQUFBLE1BQ3REO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQUM7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
